/*
 * This file is part of Android AppStudio [https://github.com/Innovative-CST/AndroidAppStudio].
 *
 * License Agreement
 * This software is licensed under the terms and conditions outlined below. By accessing, copying, modifying, or using this software in any way, you agree to abide by these terms.
 *
 * 1. **  Copy and Modification Restrictions  **
 *    - You are not permitted to copy or modify the source code of this software without the permission of the owner, which may be granted publicly on GitHub Discussions or on Discord.
 *    - If permission is granted by the owner, you may copy the software under the terms specified in this license agreement.
 *    - You are not allowed to permit others to copy the source code that you were allowed to copy by the owner.
 *    - Modified or copied code must not be further copied.
 * 2. **  Contributor Attribution  **
 *    - You must attribute the contributors by creating a visible list within the application, showing who originally wrote the source code.
 *    - If you copy or modify this software under owner permission, you must provide links to the profiles of all contributors who contributed to this software.
 * 3. **  Modification Documentation  **
 *    - All modifications made to the software must be documented and listed.
 *    - the owner may incorporate the modifications made by you to enhance this software.
 * 4. **  Consistent Licensing  **
 *    - All copied or modified files must contain the same license text at the top of the files.
 * 5. **  Permission Reversal  **
 *    - If you are granted permission by the owner to copy this software, it can be revoked by the owner at any time. You will be notified at least one week in advance of any such reversal.
 *    - In case of Permission Reversal, if you fail to acknowledge the notification sent by us, it will not be our responsibility.
 * 6. **  License Updates  **
 *    - The license may be updated at any time. Users are required to accept and comply with any changes to the license.
 *    - In such circumstances, you will be given 7 days to ensure that your software complies with the updated license.
 *    - We will not notify you about license changes; you need to monitor the GitHub repository yourself (You can enable notifications or watch the repository to stay informed about such changes).
 * By using this software, you acknowledge and agree to the terms and conditions outlined in this license agreement. If you do not agree with these terms, you are not permitted to use, copy, modify, or distribute this software.
 *
 * Copyright Â© 2024 Dev Kumar
 */

plugins {
	id "com.android.application"
	id "de.undercouch.download"
	id "org.jetbrains.kotlin.android"
}

def KEYSTOREPASSWORD = System.getenv("KEYSTOREPASSWORD")
def firebase = System.getenv("Firebase")

if (firebase != null) {
	if (!new File("$projectDir/google-services.json").exists()) {
		new File("$projectDir/google-services.json").text = firebase
	}
	apply plugin: "com.google.gms.google-services"
} else {
	if (file("google-services.json").exists()) {
		apply plugin: "com.google.gms.google-services"
	}
}

def localPropsFile = rootProject.file("local.properties")
def properties = new Properties()
def signingEnabled = false
def password = ""
def runSpotlessApplyAfterAssembleDebug = false

if (localPropsFile.exists()) {
	localPropsFile.withInputStream { inputStream ->
		properties.load(inputStream)
	}
} else {
	printInfoBox("""
If you are running this project locally, please set up the following properties in local.properties:
----------------------------------------------------------------------------------------------------
Properties                             Values                Description

keyStorePassword                       [password]            The app will be signed if a password is provided for the keystore (app/keystore.jks).
isDeveloperMode                        [true, false]         Must be set to true for the following properties to work.
STORAGE                                [path]                The storage path that the app will use to store projects or read/install extensions.
installExtensions                      [true, false]         Set to true to install extensions in the specified storage.Depends on isDeveloperMode, STORAGE.
runSpotlessApplyAfterAssembleDebug     [true, false]         Formats, reorder imports and remove unused imports when project assemble task is finished.
""")
}

if (KEYSTOREPASSWORD != null) {
	password = KEYSTOREPASSWORD
	signingEnabled = true
} else if (localPropsFile.exists()) {
	if (properties.getProperty("keyStorePassword") != null) {
		password = properties.getProperty("keyStorePassword")
		signingEnabled = true
	}
	runSpotlessApplyAfterAssembleDebug = new Boolean(properties.getProperty("runSpotlessApplyAfterAssembleDebug", "false"))
}

if(localPropsFile.exists()){
	printInfoBox("""
Setting up properties from environment and local.properties
-----------------------------------------------------------
Properties                           Values

isDeveloperMode                      ${properties.getProperty("isDeveloperMode", "NOT_SET")}
STORAGE                              ${properties.getProperty("STORAGE", "NOT_SET")}
keyStorePassword                     ${password.equals("") ? "NOT_SET" : "****************" }
installExtensions                    ${properties.getProperty("installExtensions", "NOT_SET")}
runSpotlessApplyAfterAssembleDebug   ${properties.getProperty("runSpotlessApplyAfterAssembleDebug", "false")}
""")
}

android {
	namespace "com.icst.android.appstudio"
	compileSdk 34
	flavorDimensions = ["abi"]
	def getCommitHash = {
		->
		def stdout = new ByteArrayOutputStream()
		exec {
			commandLine "git", "rev-parse", "--short", "HEAD"
			standardOutput = stdout
		}
		return stdout.toString().trim()
	}

	def getCommitSha = {
		->
		def stdout = new ByteArrayOutputStream()
		exec {
			commandLine "git", "rev-parse", "HEAD"
			standardOutput = stdout
		}
		return "\"" + stdout.toString().trim() + "\""
	}

	defaultConfig {
		applicationId "com.icst.android.appstudio"
		multiDexEnabled true
		minSdk 26
		targetSdk 28
		versionCode 1
		versionName "1.0 Alpha01-Snapshot-" + getCommitHash()
		buildConfigField "String", "commitSha", getCommitSha()
		buildConfigField "boolean", "isDeveloperMode", properties.getProperty("isDeveloperMode", "false")
		buildConfigField "java.io.File", "STORAGE", "new java.io.File(\"" + properties.getProperty("STORAGE", "NOT_PROVIDED") + "\")"

		vectorDrawables {
			useSupportLibrary true
		}
	}

	productFlavors {
		arm {
			dimension "abi"
			versionNameSuffix "-armeabi-v7a"
			buildConfigField "String", "abi", "\"armeabi-v7a\""
			ndk {
				abiFilters "armeabi-v7a"
			}
		}

		aarch64 {
			dimension "abi"
			versionNameSuffix "-arm64-v8a"
			buildConfigField "String", "abi", "\"arm64-v8a\""
			ndk {
				abiFilters "arm64-v8a"
			}
		}

		x86 {
			dimension "abi"
			versionNameSuffix "-x86"
			buildConfigField "String", "abi", "\"x86\""
			ndk {
				abiFilters "x86"
			}
		}

		x86_64 {
			dimension "abi"
			versionNameSuffix "-x86_64"
			buildConfigField "String", "abi", "\"x86_64\""
			ndk {
				abiFilters "x86_64"
			}
		}
	}

	buildTypes {
		release {
			minifyEnabled true
			proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
		}
	}

	compileOptions {
		coreLibraryDesugaringEnabled true
		sourceCompatibility JavaVersion.VERSION_17
		targetCompatibility JavaVersion.VERSION_17
	}

	buildFeatures {
		viewBinding true
		buildConfig true
	}

	signingConfigs {
		release {
			if (signingEnabled) {
				storeFile file("keystore.jks")
				storePassword password
				keyAlias "AndroidAppStudio"
				keyPassword password
			}
		}

		debug {
			if (signingEnabled) {
				storeFile file("keystore.jks")
				storePassword password
				keyAlias "AndroidAppStudio"
				keyPassword password
			}
		}
	}

	packagingOptions {
		exclude "META-INF/AL2.0"
		exclude "META-INF/LGPL2.1"
		exclude "xsd/catalog.xml"
		exclude "META-INF/DEPENDENCIES"
		exclude "META-INF/LICENSE.md"
		exclude "META-INF/NOTICE.md"
		exclude "META-INF/eclipse.inf"
		exclude "about_files/LICENSE-2.0.txt"
		exclude "plugin.xml"
		exclude "plugin.properties"
	}
}

def printInfoBox(String additionalText) {
	def generalInfo = """
Notice for contributors
-----------------------
- Do not push the code without running ./gradlew spotlessApply after you have modified the code.
- Do not add/change any pre-existing propeties file.

Social
------
Discord      http://discord.gg/RM5qaZs4kd
Youtube      https://youtube.com/@innovative-cst
"""
	def text = generalInfo.concat(additionalText)
	println()
	def lines = text.split("\n")
	def maxLength = lines.collect { it.length() }.max()
	def boxWidth = maxLength + 4
	def horizontalBorder = "+" + "-".repeat(boxWidth) + "+"
	println horizontalBorder
	lines.each { line ->
		def paddedLine = line.padRight(maxLength)
		println "|  " + paddedLine + "  |"
	}
	// Print the bottom border
	println horizontalBorder
	println()
}

def downloadBootstrap(String arch, String variant) {
	println "Downloading bootstrap-${arch}.zip..."
	if (file("src/${arch}/assets/bootstrap.zip").exists()) {
		println "Downloading bootstrap-${arch} will be ignored as it already exists."
	}
	download.run {
		src "https://github.com/Innovative-CST/termux-packages/releases/download/bootstrap-2024.08.25-r2%2Bapt-android-7/bootstrap-${arch}.zip"
		dest file("src/${variant}/assets/bootstrap.zip")
		overwrite false
	}
}

task downloadBootstrapArm {
	doLast {
		downloadBootstrap("arm", "arm")
	}
}

task downloadBootstrapAarch64 {
	doLast {
		downloadBootstrap("aarch64", "aarch64")
	}
}

task downloadx86 {
	doLast {
		downloadBootstrap("i686", "x86")
	}
}

task downloadx86_64 {
	doLast {
		downloadBootstrap("x86_64", "x86_64")
	}
}

dependencies {
	implementation fileTree(dir: "libs", include: ["*.jar"])

	implementation("com.squareup.okhttp3:okhttp:4.12.0")
	implementation("com.google.guava:guava:33.1.0-android")

	coreLibraryDesugaring("com.android.tools:desugar_jdk_libs:2.0.2")

	implementation("androidx.appcompat:appcompat:$appcompat_version")
	implementation("androidx.constraintlayout:constraintlayout:2.1.4")

	implementation("com.google.android.material:material:$material_design_version")
	implementation("com.github.bumptech.glide:glide:4.12.0")
	implementation("com.google.code.gson:gson:$gson_version")
	implementation("com.squareup.okhttp3:okhttp:3.9.1")
	implementation("com.blankj:utilcodex:blankj_utilcodex_version")

	def editorGroupId = "io.github.Rosemoe.sora-editor"
	implementation platform("$editorGroupId:bom:$sora_editor_version")
	implementation("$editorGroupId:editor")
	implementation("$editorGroupId:language-textmate")

	implementation platform("com.google.firebase:firebase-bom:32.2.3")
	implementation("com.google.firebase:firebase-analytics")
	implementation("com.google.firebase:firebase-database")

	implementation("com.termux.termux-app:terminal-view:0.117")
	implementation("com.termux.termux-app:terminal-emulator:0.117")

	runtimeOnly("com.android.tools:sdklib:31.5.1") {
		exclude group: "com.sun.activation", module: "javax.activation"
	}

	implementation project(":core")
	implementation project(":block")
	implementation project(":editor")
	implementation project(":vieweditor")
	implementation project(":prdownloader")
	implementation project(":themeEngine")
	implementation project(":treeview")
	api project(":tooling:api")
	api project(":composite-builds:build-deps:java-compiler")
	api project(":composite-builds:build-deps:javac")
	api project(":composite-builds:build-deps:jaxp")
	api project(":composite-builds:build-deps:jdk-compiler")
	api project(":composite-builds:build-deps:jdk-jdeps")

	compileOnly(":tooling:impl")
}

def shouldInstallExtension() {

	def localPropsFile = rootProject.file("local.properties")
	def properties = new Properties()

	if (localPropsFile.exists()) {
		localPropsFile.withInputStream { inputStream ->
			properties.load(inputStream)
		}
	}

	Boolean installExtensions = new Boolean(properties.getProperty("installExtensions", "false"))
	Boolean isDeveloperMode = new Boolean(properties.getProperty("isDeveloperMode", "false"))


	if (!(installExtensions && isDeveloperMode)) {
		return false
	}

	String storage = properties.getProperty("STORAGE", "NOT_PROVIDED")

	if (!(storage.equals("NOT_PROVIDED"))) {
		return true
	}
}

project.afterEvaluate {
	tasks.named("assembleArmDebug").configure {
		dependsOn downloadBootstrapArm
		if (shouldInstallExtension()) {
			dependsOn project(":extension").tasks.named("generateExtensions")
		}

		if(runSpotlessApplyAfterAssembleDebug){
			rootProject.tasks.named("spotlessApply").configure {
				mustRunAfter(tasks.named("assembleArmDebug"))
			}
			finalizedBy(rootProject.tasks.named("spotlessApply"))
		}
	}

	tasks.named("assembleAarch64Debug").configure {
		dependsOn downloadBootstrapAarch64
		if (shouldInstallExtension()) {
			dependsOn project(":extension").tasks.named("generateExtensions")
		}

		if(runSpotlessApplyAfterAssembleDebug){
			rootProject.tasks.named("spotlessApply").configure {
				mustRunAfter(tasks.named("assembleAarch64Debug"))
			}
			finalizedBy(rootProject.tasks.named("spotlessApply"))
		}
	}

	tasks.named("assembleX86Debug").configure {
		dependsOn downloadx86
		if (shouldInstallExtension()) {
			dependsOn project(":extension").tasks.named("generateExtensions")
		}

		if(runSpotlessApplyAfterAssembleDebug){
			rootProject.tasks.named("spotlessApply").configure {
				mustRunAfter(tasks.named("assembleX86Debug"))
			}
			finalizedBy(rootProject.tasks.named("spotlessApply"))
		}
	}

	tasks.named("assembleX86_64Debug").configure {
		dependsOn downloadx86_64
		if (shouldInstallExtension()) {
			dependsOn project(":extension").tasks.named("generateExtensions")
		}

		if(runSpotlessApplyAfterAssembleDebug){
			rootProject.tasks.named("spotlessApply").configure {
				mustRunAfter(tasks.named("assembleX86_64Debug"))
			}
			finalizedBy(rootProject.tasks.named("spotlessApply"))
		}
	}
}
